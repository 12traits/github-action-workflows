name: kubernetes-deploy

on:
  workflow_call:
    secrets:
      k8s-sa-json:
        required: true
        description: K8S access key in Json that have permissions to set image:tag to kubernetes deployments
      gcp-project-id:
        required: true
        description: GCP Project ID
      slack-build-webhook:
        required: false
    inputs:
      deployment-type:
        type: string
        description: Type of K8s object (Deployment, Statefulset, CronJob)
        default: deployment
      deployment-image:
        required: true
        type: string
        description: K8s deployment name
      docker-image:
        required: true
        type: string
        description: Deployment docker image to deploy
      container-name:
        required: false
        type: string
        description: Container name
        default: ''
      init-container-name:
        required: false
        type: string
        description: Init Container name
        default: ''
      docker-tag:
        required: true
        type: string
        description: Docker image tag to deploy
      docker-registry:
        type: string
        description: Docker registry DNS
        default: eu.gcr.io
      cluster:
        required: true
        type: string
        description: Cluster name 
      zone:
        type: string
        description: Cluster zone
        default: europe-west1-b
      namespace:
        required: true
        type: string
        description: K8s namespace where the deployment was made
jobs:
  deploy-image:
    name: "Update docker image/tag to a k8s deployment"
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@v3
      - id: gcp-auth
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.k8s-sa-json }}

      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v0'
        with:
          install_components: 'gke-gcloud-auth-plugin'
      - name: "Connect to cluster"
        uses: google-github-actions/get-gke-credentials@v0
        with:
          cluster_name: ${{ inputs.cluster }}
          location: ${{ inputs.zone }}
          project_id: ${{ secrets.gcp-project-id }}
      - name: Assess container name
        id: container
        run: |
          if [[ "${{ inputs.container-name }}" == "" ]]; then
            echo "name=${{ inputs.deployment-image }}" >> $GITHUB_OUTPUT
          else
            echo "name=${{ inputs.container-name }}" >> $GITHUB_OUTPUT
          fi
      - name: Assess init container
        id: init-container
        run: |
          if [[ "${{ inputs.init-container-name }}" == "" ]]; then
            echo "init-cli=" >> $GITHUB_OUTPUT
          else
            echo "init-cli=${{ inputs.init-container-name }}=${{ inputs.docker-registry }}/${{ secrets.gcp-project-id }}/${{ inputs.docker-image }}:${{ inputs.docker-tag }}" >> $GITHUB_OUTPUT
          fi
      - name: Deploy
        id: deploy-docker-image
        run: |
          kubectl set image ${{ inputs.deployment-type }} ${{ inputs.deployment-image }} -n ${{ inputs.namespace }} \
            ${{ steps.container.outputs.name }}=${{ inputs.docker-registry }}/${{ secrets.gcp-project-id }}/${{ inputs.docker-image }}:${{ inputs.docker-tag }} \
            ${{ steps.init-container.outputs.init-cli }}
          kubectl rollout status ${{ inputs.deployment-type}}/${{ inputs.deployment-image }} -n ${{ inputs.namespace }}
      # some pods have multiple containers
      # right now all containers use same docker image and docker tag
      # but that might change in the future, and for debugging or hotfixing
      # we want to store the version deployed per container so it's all separated and easier
      - name: Save deployment state into configmap
        run: |
          DEPLOYED_DATE=$(date '+%Y-%m-%d %H:%M:%S')
          kubectl create configmap deployment-${{ steps.container.outputs.name }} \
            --from-literal version="${{ inputs.docker-tag }}" \
            --from-literal deployed_at="$DEPLOYED_DATE" \
            --namespace ${{ inputs.namespace }} \
          || \
          kubectl patch configmap deployment-${{ steps.container.outputs.name }} \
            -p '{"data": {"version": "${{ inputs.docker-tag }}", "deployed_at": "'"$DEPLOYED_DATE"'"}}' \
            --namespace ${{ inputs.namespace }}
      - uses: act10ns/slack@v1
        with: 
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          webhook-url: ${{ secrets.slack-build-webhook }}
        if: always()