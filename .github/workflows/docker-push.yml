name: docker-push
on:
  workflow_call:
    secrets:
      gh-token:
        required: true
      gcp-sa-json:
        required: true
        description: GCP access key in Json that have permissions to push images to repo
      gcp-project-id:
        required: true
        description: GCP Project ID
    inputs:
      repository-base-name:
        required: true
        type: string
        description: 'Docker registry's repository name'
      docker-registry:
        type: string
        description: Docker registry DNS
        default: eu.gcr.io
      release-tag:
        type: string
        description: Git release tag
        default: dev
      is-latest:
        type: boolean
        description: Do we want to tag this image as latest
        default: false
    outputs:
      sha-short:
        value: ${{ jobs.docker-push.outputs.sha-short }}
        description: short SHA of the commit
      branch:
        value: ${{ jobs.docker-push.outputs.branch }}
        description: branch name

jobs:
  docker-push:
    runs-on: ubuntu-latest
    outputs:
      sha-short: ${{ steps.vars-step.outputs.sha-short }}
    steps:
    - uses: actions/checkout@v3
    - name: Init git vars
      shell: bash
      id: vars-step
      run: |
        echo "sha-short=$(git rev-parse --short=7 HEAD)" >> $GITHUB_OUTPUT
        echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT

    - id: gcp-auth
      uses: google-github-actions/auth@v0
      with:
        credentials_json: ${{ secrets.gcp-sa-json }}

    - name: Set up Cloud SDK
      uses: 'google-github-actions/setup-gcloud@v0'

    - name: docker-auth
      shell: bash
      run: gcloud auth configure-docker -q

    - name: Build and Push Image
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      env:
        REGISTRY: ${{ inputs.docker-registry }}/${{ secrets.gcp-project-id }}/${{ inputs.repository-base-name }}
        GH_ACCESS_TOKEN: ${{ secrets.gh-token }}
      run: |
        export $LATEST=""
        if [ "${{ inputs.is-latest }}" -eq "true" ]; then
          export $LATEST="-t $REGISTRY\:latest"
        fi
        docker build -f Dockerfile --build-arg  GH_ACCESS_TOKEN=$GH_ACCESS_TOKEN \
          -t $REGISTRY\:${{ steps.vars-step.outputs.sha-short }} \
          -t $REGISTRY\:${{ inputs.release-tag }} \
          $LATEST \
          -t $REGISTRY\:${{ steps.vars-step.outputs.branch }} .  && \
        docker push $REGISTRY --all-tags