name: kubernetes-preview
on:
  workflow_call:
    secrets:
      k8s-sa-json:
        required: true
        description: K8S access key in Json that have permissions to set image:tag to kubernetes deployments
      gcp-project-id:
        required: true
        description: GCP Project ID
      slack-build-webhook:
        required: false
    inputs:
      deployment-target:
        required: true
        type: string
        description: K8s deployment name we want to clone
      docker-tag:
        required: true
        type: string
        description: Docker image tag to deploy
      cluster:
        required: true
        type: string
        description: Cluster name 
      namespace:
        required: true
        type: string
        description: K8s namespace where the deployment was made
      zone:
        type: string
        description: Cluster zone
        default: europe-west1-b
      expiration:
        type: string
        description: Expiration in days (1, 2, 3, 5 or 8)
        default: "3"
      comment:
        type: string
        description: comment body that could contains some config
        default: ""
    outputs:
      deployment-name:
        value: ${{ jobs.preview-deployment.outputs.deployment-name }}
        description: Generated deployment name
      gateway-url:
        value: ${{ jobs.preview-deployment.outputs.gateway-url }}
        description: Gateway url if any ingress was found
      internal-addr:
        value: ${{ jobs.preview-deployment.outputs.internal-addr }}
        description: Internal address of this service
      expiration-datetime:
        value: ${{ jobs.preview-deployment.outputs.expiration-date }}
        description: Date of when it will be deleted
      
jobs:
  preview-deployment:
    runs-on: self-hosted
    outputs:
      internal-addr: ${{ steps.kubernetes-service.outputs.service-addr }}
      gateway-url: ${{ steps.kubernetes-ingress.outputs.gateway-url }}
      deployment-name: ${{ steps.deployment-name.outputs.name }}
      expiration-date: ${{ steps.expiration-ts.outputs.date-end }}
    steps:
      - uses: actions/checkout@v3
      - id: gcp-auth
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.k8s-sa-json }}
      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v0'
        with:
          install_components: 'gke-gcloud-auth-plugin'
      - name: "Connect to cluster"
        uses: google-github-actions/get-gke-credentials@v0
        with:
          cluster_name: ${{ inputs.cluster }}
          location: ${{ inputs.zone }}
          project_id: ${{ secrets.gcp-project-id }}
      - name: Get code
        id: code
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [[ "${{ github.event_name }}" == "issue_comment" ]]; then
            export JSON_RESP=`curl -s --request GET --url "${{ github.event.issue.pull_request.url }}" --header "Authorization: Bearer $GH_TOKEN"`
            echo "pr-number=`echo $JSON_RESP | jq -r .number`" >> $GITHUB_OUTPUT
            if [[ "${{ inputs.docker-tag }}" =~ ^v[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+ ]]; then
              echo "code=${{ inputs.docker-tag }}" >> $GITHUB_OUTPUT
            else
              echo "code=`echo $JSON_RESP | jq -r .number`" >> $GITHUB_OUTPUT
            fi
          else
            echo "this workflow has to be ran into the context of a comment of a pull request"
            exit 1
          fi
      - name: Get deployment-name
        id: deployment-name
        run: |
          echo "name=${{ inputs.deployment-target }}-${{ steps.code.outputs.code }}" >> $GITHUB_OUTPUT
      - name: Get expiration timestamp
        id: expiration-ts
        run: |
          expiration=${{ inputs.expiration}}
          if [[ ${{ inputs.expiration }} -gt 8 ]] || [[ ${{ inputs.expiration }} -lt 1 ]]; then
            expiration=3
          fi
          t=`date -d "+$expiration day" +"%s"`
          echo "timestamp=$t" >> $GITHUB_OUTPUT
          echo "date-end=`date -ud @$t`" >> $GITHUB_OUTPUT
      - name: Create Deployment
        id: kubernetes-deployment
        run: |
          kubectl delete deployment --namespace ${{ inputs.namespace }} ${{ steps.deployment-name.outputs.name }} || true
          kubectl get deployment --namespace ${{ inputs.namespace }} ${{ inputs.deployment-target }} -o yaml > /tmp/deployment.yaml
          yq 'del(.metadata.creationTimestamp, .metadata.generation, .metadata.annotations, .metadata.resourceVersion, .metadata.uid, .status)' -i /tmp/deployment.yaml
          yq '.metadata.labels."app.kubernetes.io/managed-by"="Platform"' -i /tmp/deployment.yaml
          yq '(..|select(has("app.kubernetes.io/name")).["app.kubernetes.io/name"]) |= "${{ steps.deployment-name.outputs.name }}"' -i /tmp/deployment.yaml
          yq '.metadata.name="${{ steps.deployment-name.outputs.name }}"' -i /tmp/deployment.yaml
          yq '.spec.template.spec.containers.[0].name="${{ steps.deployment-name.outputs.name }}"' -i /tmp/deployment.yaml
          yq '.metadata.labels.preview="true"' -i /tmp/deployment.yaml
          yq '.metadata.labels.expiration="${{ steps.expiration-ts.outputs.timestamp }}"' -i /tmp/deployment.yaml
          yq '.metadata.labels.pr-number="${{ steps.code.outputs.pr-number }}"' -i /tmp/deployment.yaml
          yq '.metadata.labels.repo="${{ github.event.repository.name }}"' -i /tmp/deployment.yaml
          yq '(..|select(has("image")).["image"]) |= sub(":[a-zA-Z0-9]+", ":${{ inputs.docker-tag }}")' -i /tmp/deployment.yaml
          cat /tmp/deployment.yaml
          kubectl apply -f /tmp/deployment.yaml
      - name: Create service
        id: kubernetes-service
        run: |
          kubectl delete service --namespace ${{ inputs.namespace }} ${{ steps.deployment-name.outputs.name }} || true
          kubectl get service --namespace ${{ inputs.namespace }} ${{ inputs.deployment-target }} -o yaml > /tmp/service.yaml
          yq 'del(.metadata.annotations.[], .spec.clusterIP, .spec.clusterIPs, .metadata.creationTimestamp, .metadata.resourceVersion, .metadata.uid, .status)' -i /tmp/service.yaml
          yq '.metadata.labels."app.kubernetes.io/managed-by"="Platform"' -i /tmp/service.yaml
          yq '.metadata.name="${{ steps.deployment-name.outputs.name }}"' -i /tmp/service.yaml
          yq '(..|select(has("app.kubernetes.io/name")).["app.kubernetes.io/name"]) |= "${{ steps.deployment-name.outputs.name }}"' -i /tmp/service.yaml
          yq '.metadata.labels.preview="true"' -i /tmp/service.yaml
          yq '.metadata.labels.expiration="${{ steps.expiration-ts.outputs.timestamp }}"' -i /tmp/service.yaml
          yq '.metadata.labels.pr-number="${{ steps.code.outputs.pr-number }}"' -i /tmp/service.yaml
          yq '.metadata.labels.repo="${{ github.event.repository.name }}"' -i /tmp/service.yaml
          PORT=`cat /tmp/service.yaml | yq '.spec.ports.[0].port'`
          echo "service-addr=${{ steps.deployment-name.outputs.name }}:$PORT" >> $GITHUB_OUTPUT
          cat /tmp/service.yaml
          kubectl apply -f /tmp/service.yaml
      - name: Create ingress
        id: kubernetes-ingress
        continue-on-error: true
        run: |
          kubectl delete ingress --namespace ${{ inputs.namespace }} ${{ steps.deployment-name.outputs.name }}-ingress || true
          kubectl get ingress --namespace ${{ inputs.namespace }} ${{ inputs.deployment-target}}-ingress -o yaml > /tmp/ingress.yaml
          yq 'del(.metadata.creationTimestamp, .metadata.generation, .metadata.annotations."meta.helm.sh/release-name", .metadata.annotations."meta.helm.sh/release-namespace", .metadata.resourceVersion, .metadata.uid, .status)' -i /tmp/ingress.yaml
          yq '.metadata.labels."app.kubernetes.io/managed-by"="Platform"' -i /tmp/ingress.yaml
          yq '.metadata.name="${{ steps.deployment-name.outputs.name }}-ingress"' -i /tmp/ingress.yaml
          yq '.spec.rules[].http.paths.[0].backend.service.name="${{ steps.deployment-name.outputs.name }}"' -i /tmp/ingress.yaml
          yq '.spec.rules[].http.paths.[0].path|="/previews/${{ steps.code.outputs.code }}"+.' -i /tmp/ingress.yaml
          yq '.metadata.labels.preview="true"' -i /tmp/ingress.yaml
          yq '.metadata.labels.expiration="${{ steps.expiration-ts.outputs.timestamp }}"' -i /tmp/ingress.yaml
          yq '.metadata.labels.pr-number="${{ steps.code.outputs.pr-number }}"' -i /tmp/ingress.yaml
          yq '.metadata.labels.repo="${{ github.event.repository.name }}"' -i /tmp/ingress.yaml
          GATEWAY=`cat /tmp/ingress.yaml | yq '.spec.rules.[0].host'`
          ROUTE=`cat /tmp/ingress.yaml | yq '.spec.rules.[0].http.paths.[0].path'`
          echo "gateway-url=${GATEWAY/12traits.com/solsten.io}$ROUTE" >> $GITHUB_OUTPUT
          cat /tmp/ingress.yaml 
          kubectl apply -f /tmp/ingress.yaml
      - name: Comment PR
        uses: thollander/actions-comment-pull-request@v2
        with:
          message: |
            Your preview for **${{ inputs.deployment-target }}** has been generated :rocket: 
            It will be there until **${{ steps.expiration-ts.outputs.date-end }}**.
            Deployment has been created with the following name: **${{ steps.deployment-name.outputs.name }}**.
            Address to connect to your service is: **${{ steps.kubernetes-service.outputs.service-addr }}**
            Gateway path (if any) should be: **${{ steps.kubernetes-ingress.outputs.gateway-url }}**


